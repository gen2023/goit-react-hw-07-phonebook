{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Modal/Modal.js","components/ContactsForm/ContactsForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Loader/Loader.js","components/App.js","redux/contacts/contacts-reduser.js","redux/store.js","index.js"],"names":["listContactRequest","createAction","listContactSuccess","listContactError","saveContactRequest","saveContactSuccess","saveContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","name","number","dispatch","contact","post","then","data","catch","error","contactId","delete","get","getLoading","state","contacts","loading","getFilter","filter","getAllContact","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","modalRoot","document","querySelector","Modal","handleKeyDown","e","code","props","onClose","handleBackdropClick","event","currentTarget","target","window","addEventListener","this","removeEventListener","createPortal","className","onClick","children","Component","ContactsForm","message","showModal","handleChange","value","setState","handleSubmit","preventDefault","checkedName","find","onContact","alert","resetForm","closeModal","onSubmit","type","placeholder","onChange","connect","contactsOperations","ContactListItem","onRemove","onRemoveContact","id","map","key","handleFilter","Loader","color","height","width","timeout","App","listContacts","isLoading","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cb11a638.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const listContactRequest = createAction('contacts/listContactRequest');\nexport const listContactSuccess = createAction('contacts/listContactSuccess');\nexport const listContactError = createAction('contacts/listContactError');\n\nexport const saveContactRequest = createAction('contacts/saveContactRequest');\nexport const saveContactSuccess = createAction('contacts/saveContactSuccess');\nexport const saveContactError = createAction('contacts/saveContactError');\n\nexport const removeContactRequest = createAction(\n  'contacts/removeContactRequest',\n);\nexport const removeContactSuccess = createAction(\n  'contacts/removeContactSuccess',\n);\nexport const removeContactError = createAction('contacts/removeContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\nimport {\n  listContactRequest,\n  listContactSuccess,\n  listContactError,\n  saveContactRequest,\n  saveContactSuccess,\n  saveContactError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4020';\n\nconst listContacts = () => dispatch => {\n  dispatch(listContactRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(listContactSuccess(data)))\n    .catch(error => dispatch(listContactError(error)));\n};\n\nconst saveContact = ({ name, number }) => dispatch => {\n  const contact = { name, number };\n\n  dispatch(saveContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(saveContactSuccess(data)))\n    .catch(error => dispatch(saveContactError(error)));\n};\n\nconst removeContact = contactId => dispatch => {\n  dispatch(removeContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(removeContactSuccess(contactId)))\n    .catch(error => dispatch(removeContactError(error)));\n};\n\nexport default { saveContact, removeContact, listContacts };\n","import { createSelector } from 'reselect';\n\nexport const getLoading = state => state.contacts.loading;\nexport const getFilter = state => state.contacts.filter;\nexport const getAllContact = state => state.contacts.items;\nexport const getVisibleContacts = createSelector(\n  [getAllContact, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport propTypes from 'prop-types';\nimport './modal.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nclass Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      this.props.onClose();\n    }\n  };\n\n  handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    return createPortal(\n      <div className=\"Modal__backdrop\" onClick={this.handleBackdropClick}>\n        <div className=\"Modal__content\">\n          <span>{this.props.children}</span>\n        </div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\nModal.propTypes = {\n  onClose: propTypes.func.isRequired,\n  children: propTypes.string.isRequired,\n};\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport { getAllContact } from '../../redux/contacts/contacts-selectors';\n\nimport Modal from '../Modal';\n\nimport './ContactsForm.css';\n\nclass ContactsForm extends Component {\n  static propTypes = {\n    onContact: propTypes.func.isRequired,\n    contacts: propTypes.array.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n    message: '',\n    showModal: false,\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { name, number } = this.state;\n    const { contacts } = this.props;\n    const checkedName = contacts.find(contact => name === contact.name);\n    const { onContact } = this.props;\n    //при вызове модального окна появляется ошибка:\n    // Error: Target container is not a DOM element.\n    // http://joxi.ru/a2XvP8QUDxYj7r\n    if (!name || !number || (!name && !number)) {\n      // this.closeModal();\n      alert(`Fill in all the fields`);\n      return;\n      // return this.setState({ message: `Fill in all the fields` });\n    }\n    if (checkedName) {\n      // this.closeModal();\n      alert(`${name} is already in contacts`);\n      return;\n      // return this.setState({ message: `${name} is already in contacts` });\n    }\n\n    onContact(this.state);\n    this.resetForm();\n  };\n\n  resetForm() {\n    this.setState({ name: '', number: '' });\n  }\n\n  closeModal = () => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }));\n  };\n\n  render() {\n    const { name, number, message, showModal } = this.state;\n\n    return (\n      <>\n        {showModal && <Modal onClose={this.closeModal}>{message}</Modal>}\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>\n              Name\n              <input\n                type=\"text\"\n                className=\"input\"\n                placeholder=\"Enter name\"\n                value={name}\n                name=\"name\"\n                onChange={this.handleChange}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Number\n              <input\n                type=\"text\"\n                className=\"input\"\n                placeholder=\"Enter number\"\n                value={number}\n                name=\"number\"\n                onChange={this.handleChange}\n              />\n            </label>\n          </div>\n\n          <button type=\"submit\">Add contact</button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getAllContact(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onContact: contact => dispatch(contactsOperations.saveContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst ContactListItem = ({ name, number, onRemove }) => (\n  <li className=\"listContacts\">\n    <span className=\"list\">{name}</span>\n    <span className=\"list\"> {number}</span>\n    <button className=\"list\" type=\"button\" onClick={onRemove}>\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  name: propTypes.string.isRequired,\n  number: propTypes.string.isRequired,\n  onRemove: propTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport ContactListItem from './ContactListItem';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nimport './Contact.css';\n\nconst ContactList = ({ contacts, onRemoveContact }) => (\n  <ul className=\"contextListContacts\">\n    <header className=\"listContacts\">\n      <span className=\"headerList\">name</span>\n      <span className=\"headerList\">telephone</span>\n      <span className=\"headerList\">action</span>\n    </header>\n\n    {contacts.map(({ id, name, number }) => (\n      <ContactListItem\n        key={id}\n        name={name}\n        number={number}\n        onRemove={() => onRemoveContact(id)}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: propTypes.oneOfType([\n    propTypes.arrayOf(\n      propTypes.exact({\n        id: propTypes.string.isRequired,\n        name: propTypes.string.isRequired,\n        number: propTypes.number.isRequired,\n      }),\n    ),\n    propTypes.array,\n  ]),\n  onRemoveContact: propTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveContact: id => dispatch(contactsOperations.removeContact(id)),\n  // onToggleCompleted: () => null,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nconst Filter = ({ value, handleFilter }) => (\n  <div>\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Enter name\"\n        value={value}\n        name=\"filter\"\n        onChange={handleFilter}\n      />\n    </label>\n  </div>\n);\n\nFilter.propTypes = {\n  value: propTypes.string.isRequired,\n  handleFilter: propTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleFilter: event => dispatch(changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport LoaderSpiner from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <LoaderSpiner\n      type=\"ThreeDots\"\n      color=\"#00BFFF\"\n      height={100}\n      width={100}\n      timeout={3000}\n    />\n  );\n};\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nimport ContactsForm from './ContactsForm';\nimport ContactList from './ContactList';\nimport Filter from './Filter';\nimport Loader from './Loader/Loader';\n\nimport contactsOperations from '../redux/contacts/contacts-operations';\nimport { getLoading } from '../redux/contacts/contacts-selectors';\n\nimport '../../node_modules/modern-normalize/modern-normalize.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.listContacts();\n  }\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n        <h2>Contact</h2>\n        <Filter />\n        {this.props.isLoading && <Loader />}\n        <ContactList />\n      </>\n    );\n  }\n}\n\nApp.propTypes = {\n  listContacts: propTypes.func,\n  isLoading: propTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  listContacts: () => dispatch(contactsOperations.listContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport {\n  listContactRequest,\n  listContactSuccess,\n  listContactError,\n  saveContactRequest,\n  saveContactSuccess,\n  saveContactError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n  changeFilter,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [listContactSuccess]: (_, { payload }) => payload,\n  [saveContactSuccess]: (state, { payload }) => [...state, payload],\n  [removeContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\nconst loading = createReducer(false, {\n  [listContactRequest]: () => true,\n  [listContactSuccess]: () => false,\n  [listContactError]: () => false,\n  [saveContactRequest]: () => true,\n  [saveContactSuccess]: () => false,\n  [saveContactError]: () => false,\n  [removeContactRequest]: () => true,\n  [removeContactSuccess]: () => false,\n  [removeContactError]: () => false,\n});\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport contactsReducer from './contacts/contacts-reduser';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store.store}> */}\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}